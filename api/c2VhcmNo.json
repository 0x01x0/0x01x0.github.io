[{"title":"我用回了HEXO","date":"2021-01-07T05:18:09.000Z","date_formatted":{"ll":"Jan 7, 2021","L":"01/07/2021","MM-DD":"01-07"},"updated":"2021-01-07T05:30:30.934Z","content":"从最开始整博客，我使用的是HEXO。它除了写文章比较麻烦之外，没有啥太大的缺点。但是中途我为了更方便的编辑和发布文章，改用了Typecho。直到…\n\n你没看错，我的博客炸了。\n早上一打开博客，发现Typecho变成这样，想想算了，换回HEXO吧。就这样，我改回来了。\n如果没有改回HEXO，我一辈子都不会发现它是那么的简单，全程没有看任何的笔记，就那么行云流水的完成了。\n","plink":"https://0x01x0.ml/2021/01/07/reset/"},{"title":"Jellyfin主题管理插件","date":"2020-12-31T17:46:20.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:46:54.076Z","content":"\n安装\n控制台-&gt;插件-&gt;存储库 点击旁边的+,名字随便输入,URL输入:https://raw.githubusercontent.com/danieladov/JellyfinPluginManifest/master/manifest.json点击保存.\n返回插件目录,在常规目录下找到Skin-Manager,点击Install.安装完成后一定要重启,不然插件显示不出来.\n使用\n控制台-&gt;插件-&gt;我的插件 点击SkinManager就可以切换皮肤了.\n\n项目地址\nhttps://github.com/danieladov/jellyfin-plugin-skin-manager\n","plink":"https://0x01x0.ml/2021/01/01/jellyfin-theme/"},{"title":"N1的最后一点余热","date":"2020-12-31T17:45:32.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:45:58.289Z","content":"前言\nFX-N1这种被玩烂掉的东西，比上不足比下有余，作为一个下载机，靠USB拖着硬盘属实是玩不出花，但是拿来做个旁路由确实一个不错的选择，网上有很多把N1直接刷成旁路由的教程可以参考，我这里是直接使用Armbian+Docker的方式来运行，不会让N1活的那么单调。本教程PC端为Ubuntu20.04,N1为Armbian。（需要一定的Linux基础）\n安装\nN1\n既然是基于Docker的，那在Armbian上就必须安装Docker了。有条件的可以直接使用官方脚本：\n1curl -fsSL https:&#x2F;&#x2F;get.docker.com | sudo bash\n没条件的可以使用国内脚本:\n1curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh\nPC\n生成镜像\n可以使用恩山大佬flippy的一键生成Docker镜像的脚本，由于脚本里的路径都是F大默认的，每个人需要的路径不同，所以我把脚本内容贴出来，可以根据自己的需求来更改。\n123456789101112131415161718192021222324252627#!/bin/bashTAG=latestif [ ! -z &quot;$1&quot; ];then        TAG=$1fi TMPDIR=openwrt_rootfsOUTDIR=/home/onegram/docker    # 本地镜像保存路径，可以自己修改，但目录要提前建好IMG_NAME=onegram/openwrt-n1   # 镜像名，可以自己修改 [ -d &quot;$TMPDIR&quot; ] &amp;&amp; rm -rf &quot;$TMPDIR&quot; mkdir -p &quot;$TMPDIR&quot;  &amp;&amp; \\gzip -dc openwrt-armvirt-64-default-rootfs.tar.gz | ( cd &quot;$TMPDIR&quot; &amp;&amp; tar xf - ) &amp;&amp; \\cp -f patches/rc.local &quot;$TMPDIR/etc/&quot; &amp;&amp; \\cp -f patches/cpustat &quot;$TMPDIR/usr/bin/&quot; &amp;&amp; \\chmod 755 &quot;$TMPDIR/usr/bin/cpustat&quot; &amp;&amp; \\cat patches/luci-admin-status-index-html.patch | (cd &quot;$TMPDIR/usr/lib/lua/luci/view/admin_status/&quot; &amp;&amp; patch -p0) &amp;&amp; \\sed -e &quot;s/net.nf_conntrack_max net.ipv4.netfilter.ip_conntrack_max/net.netfilter.nf_conntrack_max net.nf_conntrack_max net.ipv4.netfilter.ip_conntrack_max \\| head -n 1/&quot; -i &quot;$TMPDIR/usr/lib/lua/luci/view/admin_status/index.htm&quot; &amp;&amp; \\rm -f &quot;$TMPDIR/etc/bench.log&quot; &amp;&amp; \\echo &quot;17 3 * * * /etc/coremark.sh&quot; &gt;&gt; &quot;$TMPDIR/etc/crontabs/root&quot; &amp;&amp; \\(cd &quot;$TMPDIR&quot; &amp;&amp; tar cf ../openwrt-armvirt-64-default-rootfs-patched.tar .) &amp;&amp; \\rm -f DockerImg-OpenwrtArm64-$&#123;TAG&#125;.gz &amp;&amp; \\docker build -t $&#123;IMG_NAME&#125;:$&#123;TAG&#125; . &amp;&amp; \\rm -f  openwrt-armvirt-64-default-rootfs-patched.tar &amp;&amp; \\rm -rf &quot;$TMPDIR&quot; &amp;&amp; \\docker save $&#123;IMG_NAME&#125;:$&#123;TAG&#125; | pigz -9 &gt; $OUTDIR/docker-img-openwrt-aarch64-$&#123;TAG&#125;.gz\n脚本编辑好以后，保存为.sh后缀的文件。\n脚本需要使用到pigz工具，一般Ubuntu都有集成，为防止某些蠢蛋只会一昧的复制粘贴，我把安装命令也写出来：\n1sudo apt install pigz\n把OpenWRT固件解压，可以的到一堆乱七八糟名字的固件，我们只需要其中一个.img的文件，把它和脚本放到同一个文件夹下，然后以root权限运行脚本：\n1sudo bash build.sh\n脚本运行结束后，在脚本里的保存路径就可以看到生成的镜像了。\n导入镜像\n把刚刚打包好的镜像用FTP工具上传到N1中，然后SSH连接N1，输入：\n1docker load --input xxx   #xxx为你刚刚生成的镜像文件名\n这时候你的镜像就已经成功导入Docker中了，可以输入以下命令查看是否导入成功：\n1docker images\n懒鬼福利\n如果对自己定制没有兴趣，可以使用P3TERX制作好的Docker镜像直接食用（除了SSRP，啥都没有）\n1docker pull p3terx&#x2F;openwrt-mini:latest\n使用\n打开网卡的混杂模式：\n1ip link set eth0 promisc on\n给Docker创建网络：\n1docker network create -d macvlan --subnet&#x3D;192.168.2.0&#x2F;24 --gateway&#x3D;192.168.2.1 -o parent&#x3D;eth0 macnet   #192.168.2.0&#x2F;24是主路由网段 192.168.2.1是主路由的IP 请根据实际情况修改\n运行OpenWRT容器\n1docker run --name openwrt --restart always -d --network macnet --privileged onegram&#x2F;openwrt-n1:latest &#x2F;sbin&#x2F;init #onegram&#x2F;openwrt-n1:latest这是镜像的名称和标签,在docker images里面可以看到,也就是在脚本里自己修改的镜像名字.\n修改Docker容器中的IP：\n12docker exec -it openwrt shvi &#x2F;etc&#x2F;config&#x2F;network\n按i开启编辑模式，将config interface 'lan'下面的option ipaddr修改为主路由同一网络的IP地址。修改完成后按esc退出编辑模式，输入:wq回车即可保存修改并退出。\n输入exit回车，退出OpenWRT容器后，输入：\n1docker restart openwrt\n重启OpenWRT容器，让刚刚的设置生效。\n重启完成之后，就可以打开浏览器，输入你刚刚在容器内设置的IP，访问N1上的OpenWRT了。\n默认的用户名为root ，密码为password。\n登录OpenWRT后，打开网络-&gt;接口修改lan接口的设置，把网关地址填上主路由的地址，DNS服务器可以填写主路由地址或你自己习惯的DNS地址。\n下方的DHCP服务器可根据自己的需求来选择是否关闭，如果选择忽略此接口，那么分配IP的功能就交由N1来处理，在电脑中就要手动设置网关为OpenWRT的IP地址，如果不勾选的话，则需要关闭主路由上的DHCP服务，电脑中的设置不需要调整。两种方法各有各的有点，如果使用N1来分配IP的话，一旦N1出现问题，家里的所有网络就瘫痪了。\n最后，在网络-&gt;防火墙-&gt;自定义规则里，添加：\n1iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE\n然后重启防火墙，这时候N1搭载的OpenWRT就开始正常运行了。\n感谢\nP3TERX: https://p3terx.com\nflippy: https://www.right.com.cn/forum/space-uid-285101.html\n","plink":"https://0x01x0.ml/2021/01/01/n1/"},{"title":"Markdown的基本语法","date":"2020-12-31T17:43:47.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:44:19.776Z","content":"前言\n如果你想让你写的文章更加美观，只需记住几个符号，运用Markdown语法即可实现。\n语法\n标题\n我们常常需要用到标题，在Markdown中标题使用#号表示，一个#代表1级标题，一共有6个级别，他们的大小依次变小。\n123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n段落\n在Markdown里面段落没有语法，但是你还是需要注意怎么划分段落。如果你一直编辑一段文字，没有空格两个以上并且按下回车键（换行），这一段文字就自成一段。在Typora里面只需要回车即可换行。\n字体\n在Markdown里面也有斜体粗体：\n123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___\n不建议用下划线，因为下划线会连在一起，不好区分数量，建议使用下面的语法：\n123*斜体文本***粗体文本*****粗斜体文本***\n分隔线\n编辑很多文字之后，如果不使用分隔线，可能会让读者错乱，使用分隔线会有一种层次感。分隔线在一行中，使用三个以上的星号、减号、下划线来建立(可以隔开)：\n12345***----------_ _ _\n删除线\n删除线就是给文本加上删除线，在文本两端使用两个波浪线~\n1~内容~\n下划线\n在Markdown里面并没有关于下划线的语法，但是Markdown允许你插入一些基本的HTML代码：\n1&lt;u&gt;内容&lt;&#x2F;u&gt;\n列表\n列表分为有序列表和无序列表两种\n有序列表\n有序列表其实很简单，就是数字加上.，内容使用空格隔开：\n1231. 第一项2. 第二项3. 第三项\n无序列表\n无序列表使用星号*、加号+、减号-，符号和内容需要用空格隔开：\n123456789101112* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项\n列表嵌套\n有序和无序可以一起使用，只需要在子列表的选项添加四个空格：\n1234561. 第一项：    - 子列表1    - 子列表22. 第二项：    - 子列表1    - 子列表2\n图片\n在一个文章里面插入图片是必不可少的，本地的文章可以使用本地图片：\n1![图片描述](图片的链接)\n表格\n在Markdown里面是可以插入表格的，可以体现一些数据：\n1234|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |\n让表格自动对齐\n居右-:\n居左:-\n居中:-:\n1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |\n转义字符\n在Markdown的语法里面，用了一些特定的符号作为语法，如果我们想输出符号，而不是被识别成语法，就需要使转义字符，只需要使用反斜杠，然后加上下面的某个符号即可：\n123456789101112\\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号\n结尾\n只需要记住一些基本的字符，就可以让你的博客内容更规范美观，何乐而不为？\n参考\n教程：https://www.runoob.com/markdown/\n","plink":"https://0x01x0.ml/2021/01/01/markdown/"},{"title":"Aria2-Pro for Docker","date":"2020-12-31T17:42:50.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:43:31.515Z","content":"系统要求\nCentOS 6+ / Debian 6+ / Ubuntu 14.04+\n架构支持\nx86_64 / i386 / ARM64 / ARM32v7 / ARM32v6\n使用说明\n为了确保能正常使用，请先安装基础组件wget、curl、ca-certificates、docker，以 Debian 为例子：\napt install wget curl ca-certificates docker.io\n运行脚本(以管理员权限运行)\nbash &lt;(wget -qO- https://git.io/JTkka)\n选择你要执行的选项\n12345678910111213141516171819 Aria2-Pro for Docker by 0x01x0 请选择您需要进行的操作:  1) 安装 Aria2-Pro  2) 卸载 Aria2-Pro------------------------  3）安装 AriaNG  4）卸载 AriaNG------------------------  5) 停止 Aria2-Pro  6) 启动 Aria2-Pro------------------------  7) 重新启动 Aria2-Pro  8) 重新安装 Aria2-Pro------------------------  9) 退出请输入编号:\n感谢\nP3TERX: https://github.com/P3TERX/Docker-Aria2-Pro\n","plink":"https://0x01x0.ml/2021/01/01/aria2-docker/"},{"title":"Docker安装以及运行Aria2整合教程","date":"2020-12-31T17:41:43.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:42:23.624Z","content":"前言\n本文只是做为杜绝重装系统后翻天覆地找教程而做，顺道做一个小分享。如果有人喜欢，尽管拿去。不用谢谢我，我也只是做了一个整合而已。\n废话不多说，现在就开始我们今天的表演。\n安装Docker\n这里我必须夸奖一下清华大学开源软件镜像站，教程通俗易懂，简直是一站式的体验，操作完后无需手动更换国内源，懒鬼的福音。\nDebian/Ubuntu 用户\n如果你过去安装过Docker，先输入以下命令卸载:\n1sudo apt-get remove docker docker-engine docker.io\n首先安装依赖:\n1sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common\n请注意你的发行版，切勿用Debian的源安装在Ubuntu的系统上。\n信任 Docker 的 GPG 公钥:\n该命令适用于Ubuntu\n1curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add - \n该命令适用于Debian\n1curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -\n对于amd64架构的计算机，添加软件仓库:\n1234sudo add-apt-repository \\   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \\   $(lsb_release -cs) \\   stable&quot;\n如果你是树莓派或其它ARM架构计算机，请运行:\n123echo &quot;deb [arch&#x3D;armhf] https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \\     $(lsb_release -cs) stable&quot; | \\    sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list\n最后输入：\n12sudo apt-get updatesudo apt-get install docker-ce\n到此，Debian/Ubuntu用户的Docker就安装好了。\nFedora/CentOS/RHEL 用户\n如果你之前安装过Docker，先输入以下命令卸载:\n1sudo yum remove docker docker-common docker-selinux docker-engine\n请注意你的发行版，切勿用Fedora的源安装在CentOS/RHEL的系统上。\n该命令适用于Fedora\n1wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;docker-ce.repo\n该命令适用于CentOS/RHEL\n1wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\n把软件仓库地址替换为TUNA（清华源的缩写）:\n1sudo sed -i &#39;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo\n最后输入：\n12sudo yum makecache fastsudo yum install docker-ce\n到此，Fedora/CentOS/RHEL用户的Docker就安装好了。\nAria2\nAria2是一个功能非常强大且功能非常齐全的下载工具，它支持 BT、磁力、HTTP、FTP 等下载协议，常用做离线下载的服务端。这里首先要感谢P3TERX制造出来只需要简单设置，就相当好用的Aria2-pro的Docker镜像。这里我就讲一些基础，想进阶的同学可以移步到P3TERX的教程修炼更高阶的玩法。\n拉取并运行Aria2-pro镜像\n在终端输入以下命令拉取并运行P3TERX制作的Docker镜像\n12345678910111213docker run -d \\    --name aria2-pro \\ #容器名称    --restart unless-stopped \\ #容器重启策略    --log-opt max-size&#x3D;1m \\ #日志大小限制为 1MB    -e PUID&#x3D;$UID \\ #设置容器内账户UID    -e PGID&#x3D;$GID \\ #设置容器内账户GID    -e RPC_SECRET&#x3D;&lt;TOKEN&gt; \\ #RPC秘钥，注意替换&lt;TOKEN&gt;字段    -p 6800:6800 \\ #RPC 通讯端口映射    -p 6888:6888 \\ #BT 监听端口（TCP）    -p 6888:6888&#x2F;udp \\ # DHT 监听端口（UDP）    -v ~&#x2F;aria2-config:&#x2F;config \\ #配置目录映射    -v ~&#x2F;downloads:&#x2F;downloads \\ #下载目录映射    p3terx&#x2F;aria2-pro #镜像名称\nRPC秘钥：即We­bUI连接时需要填写的密码。使用启动命令定义后无法进行修改，只能删除容器重建。\n目录映射：冒号的左边为主机上的目录，右边为容器的目录，只能更换左边目录到你的指定目录，右边千万不能更改，且目录不能包含中文。\n使用AriaNg连接Aria2-pro\nAria2-pro只是服务，并没有GUI界面，我们需要使用AriaNg来连接，这里又要感谢一遍P3TERX提供的WebUI，打开网页，点击左边菜单栏上的AriaNg设置，再点击右边的RPC，然后在Aria2 RPC地址里输入你刚刚安装Aria2-pro的设备IP，在Aria2 RPC秘钥里输入创建的秘钥，右上角会弹出一个框，点击重新加载AriaNg，左边菜单栏下出现绿色的已连接，那么就可以开始你的下载了。\n总结\n本文有比较多挺容易踩坑的地方，如果出现报错或者运行失败的地方，请认真、仔细看我标注的重点。\n最后的最后\n这篇文章算是我写的非常难受的一篇文章了，如果只是复制粘贴，我相信大部分人已经成功的运行了，但是为了发挥一篇整合教程的作用，我必须更换成一些浅显易懂的词语句子~，让我很费脑~。不过好在算是写完了，这里还是要再次感谢清华大学开源软件镜像站和优秀的P3TERX，毕竟没有他们也就没有这篇简陋的教程。\n参考\nP3TERX：https://p3terx.com/archives/docker-aria2-pro.html\n清华源：https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/\n","plink":"https://0x01x0.ml/2021/01/01/aria2-pro/"},{"title":"利用Python批量把图片输出为PDF文档","date":"2020-12-31T17:40:21.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:40:54.586Z","content":"前言\n在Github瞎晃荡，发现了一个便利性很高的Python库 —— Pillow\n这个库可以把图片文件夹内的图片批量输出成PDF文件，例如下载到的漫画都是一张一张的，而且有横竖不一和尺寸大小不一的情况，输出成PDF文件后，看漫画只需要上下滑动屏幕就好了。\n安装Pillow\n12python3 -m pip install --upgrade pippython3 -m pip install --upgrade Pillow\n创建main.py\nDOC_NAME = ‘’ //图片输出的名字(根据实际情况变更)\nIMAGES_PATH = ‘images/’   // 图片的保存路径(根据实际情况变更)\nSAVE_PATH = ‘pdf/’   // PDF输出的路径(根据实际情况变更)\nPAGE = 1              // 图片的张数 (根据实际情况变更)\nFILE_TYPE = '.’      // 图片格式(根据实际情况变更)\nFILL_NUMBER = 3         // 需要填充的长度(根据实际情况变更)\n12345678910111213141516171819from PIL import Image_cover &#x3D; Image.open(&#39;images&#x2F;&#123;&#125;&#123;&#125;&#39;.format(&#39;1&#39;.zfill(__FILL_NUMBER__), __FILE_TYPE__))cover &#x3D; _cover.convert(&#39;RGB&#39;)imagelist &#x3D; []for i in range(2, __PAGE__ + 1):    _index &#x3D; str(i).zfill(__FILL_NUMBER__)    _real_path &#x3D; __IMAGES_PATH__ + _index + __FILE_TYPE__    _image &#x3D; Image.open(_real_path)    _im &#x3D; _image.convert(&#39;RGB&#39;)    imagelist.append(_im)saved_path &#x3D; __SAVE_PATH__ + __DOC_NAME__ + &#39;.pdf&#39;cover.save(saved_path, save_all&#x3D;True, append_images&#x3D;imagelist)__FILL_NUMBER__的数值取决于图片文件名，例如：001.jpg 该参数则为3.","plink":"https://0x01x0.ml/2021/01/01/pillow/"},{"title":"Hexo添加Aplayer播放器","date":"2020-12-31T17:39:10.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:41:15.229Z","content":"前言\n做为一个个人博客，音乐应该是必须要有的东西（个人认为），昨天搭建了hexo博客，那我们必须把这个基本中的基本，也就是音乐播放器给弄起来。上网搜了一圈，对hexo来说，aplayer是一个很另类的存在，为啥说它另类呢？因为它原本非常的简单易用，但是在造物者的教程里，写了非常非常非常……（此处省略六千字）多的功能,导致我们这些小白一看头就昏，错了无数次。那现在，我就总结一下最基本的使用方法，也是本人觉得最好用的方法。\n安装\n1$ npm install --save hexo-tag-aplayer\n依赖\nAPlayer.js > 1.8.0\nMeting.js > 1.1.1\n配置\n修改blog文件夹下的_config.yml文件\n1$ vim _config.yml\n在文件的最后一行添加下列代码\n12aplayer:  meting: true\n使用\n12345&lt;!-- 简单示例 (id, server, type)  --&gt;&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;&lt;!-- 进阶示例 --&gt;&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;\n\n有关设置的选项列表如下\n\n\n选项\n默认值\n描述\n\n\n\n\nid\n必须值\n歌曲 id / 播放列表 id / 相册 id / 搜索关键字\n\n\nserver\n必须值\n音乐平台: netease, tencent, kugou, xiami, baidu\n\n\ntype\n必须值\nsong, playlist, album, search, artist\n\n\nfixed\nfalse\n开启固定模式\n\n\nmini\nfalse\n开启迷你模式\n\n\nloop\nall\n列表循环模式：all, one,none\n\n\norder\nlist\n列表播放模式：list, random\n\n\nvolume\n0.7\n播放器音量\n\n\nlrctype\n0\n歌词格式类型\n\n\nlistfolded\nfalse\n指定音乐播放列表是否折叠\n\n\nstoragename\nmetingjs\nLocalStorage 中存储播放器设定的键名\n\n\nautoplay\ntrue\n自动播放，移动端浏览器暂时不支持此功能\n\n\nmutex\ntrue\n该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\n\nlistmaxheight\n340px\n播放列表的最大长度\n\n\npreload\nauto\n音乐文件预载入模式，可选项： none, metadata, auto\n\n\ntheme\n#ad7a86\n播放器风格色彩设置\n\n\n最后\n只要按照示例，把相关代码插入文章内，就可以轻松使用aplayer播放器了，希望这篇博客对你有所帮助。\n感谢\nDIYgod:https://diygod.me/\n","plink":"https://0x01x0.ml/2021/01/01/aplayer/"},{"title":"在Github上部署Hexo（纯白教程）","date":"2020-12-31T17:36:28.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T17:38:30.109Z","content":"前言\n最近看了很多群友都有博客，属实是手痒了，之前搞过半天Gridea，整的不清不楚的，今天闲着无聊，琢磨了一下hexo，并且部署到了Github上（省去多项费用），舒服。\n现在就给大家分享一下心得吧。新手心得，最适合新手看。本文是Ubuntu环境。\n\n注册Github账号\n打开Github.点击右上角的Sign up.填写你的用户名(想好再填写，关系到你以后博客地址，如果你要花钱另外买域名，请忽略)，邮箱，密码。点击Select a plan后，到你填写的邮箱里去验证账号后，就注册好你的账号了。\n点击右上角的Sign in.即可登录你的账号。\n创建Github仓库\n新建一个名为你的用户名.github.io的仓库，必须是你的用户名，其他的名字没用，以后你的博客地址就是你的用户名.github.io，所以上面提醒你想好再填写用户名。\n注意：\n新创建的仓库有可能不会马上生效，请耐心等待一段时间（运气成分很重要）。\n配置SSH Key\n在终端命令行输入\n1$ cd ~&#x2F;.ssh #检查本机是否有ssh密钥\n一般你是新建账户的情况下，是不可能有秘钥的（手动滑稽）。\n1$ ssh-keygen -t rsa -C XXX@XXX.XX #把XXX@XXX.XX替换为你注册账号是填写的邮箱。\n然后无视提示，回车三连，最后你会在~/.ssh目录下找到id_rsa.pub这个秘钥文件，用Vim打开，全选复制里面的内容。\n打开你的Github主页，点击右上角你的头像，下拉列表选择Settings，页面左边的列表点击SSH and GPG keys，然后再点击New SSH key，Title可以随意填写，比如：blog。把你前面复制的秘钥内容粘贴到下方的Key里，接着点Add SSH key。\n回到终端命令行，输入:\n1$ ssh -T git@github.com #邮箱地址不用改\n如果有提示Are you sure you want to continue connecting (yes/no)?，输入yes，如果看到Hi 你的用户名! You’ve successfully authenticated, but GitHub does not provide shell access.说明你的SSH已经配置成功了。\n12$ git config --global user.name XXX #把XXX替换为你的用户名$ git config --global user.email  XXX@XXX.XX #把XXX@XX.XX替换为你的邮箱\n安装hexo\n终端命令行输入\n12$ npm install -g hexo #安装hexo\n安装完成后直接输入\n123$ hexo init blog #blog可随意更换$ cd blog$ hexo s #启动你的hexo服务\n打开浏览器访问http://localhost:4000 就可以预览你的hexo博客了。\n部署前的准备\n修改blog文件夹下的_config.yml文件\n1$ vim _config.yml\n找到depoloy字段，按i转换为编辑模式，更改为下面这样\n1234deploy: type: git repository: git@github.com:你的用户名&#x2F;你的用户名.github.io.git branch: master\n改完以后按ESC，键入:wq即可。\n接着安装hexo的部署插件，在终端命令行输入\n1$ npm install --save hexo-deployer-git \n安装后才能使用hexo d部署命令。\n部署\n在你编写完博客后，输入\n1hexo g\n就可以把你写的MD文件转换成HTML文件\n接着再输入\n1hexo d\n把你生成的HTML文件部署到你的Github上。\n总结\n看着很绕，但是你如果忽略掉我的废话，不停的复制粘贴，很快就可以完成Github部署hexo的事情。\n最后的最后\n附上一些常用的命令\nhexo new XXX #新建文章，XXX可替换为你的文章名\nhexo new page XXX #新建页面，XXX可替换为你的页面名\nhexo generate #生成静态页面，可缩写hexo g\nhexo server #开启预览，默认端口4000，可缩写hexo s\nhexo deploy #部署到GitHub，可缩写hexo d\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\n","plink":"https://0x01x0.ml/2021/01/01/hexo/"},{"title":"音乐","date":"2020-12-31T18:40:59.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T19:08:35.388Z","content":"\n\n\n\n\n","plink":"https://0x01x0.ml/music/"},{"title":"人才市场","date":"2020-12-31T17:51:29.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"updated":"2021-01-06T18:09:52.493Z","content":"\n\nP3TERX\n\nJW TECH TIPS\n\nBORBER\n\n唤醒\n\nSuLingGG\n\n","plink":"https://0x01x0.ml/links/"}]