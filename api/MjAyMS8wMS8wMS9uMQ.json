{"title":"N1的最后一点余热","date":"2020-12-31T17:45:32.000Z","date_formatted":{"ll":"Jan 1, 2021","L":"01/01/2021","MM-DD":"01-01"},"link":"2021/01/01/n1","updated":"2021-02-24T12:46:44.316Z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h2>\n<p>FX-N1这种被玩烂掉的东西，比上不足比下有余，作为一个下载机，靠USB拖着硬盘属实是玩不出花，但是拿来做个旁路由确实一个不错的选择，网上有很多把N1直接刷成旁路由的教程可以参考，我这里是直接使用Armbian+Docker的方式来运行，不会让N1活的那么单调。<code>本教程PC端为Ubuntu20.04,N1为Armbian。</code>（需要一定的Linux基础）</p>\n<h2 id=\"安装\">安装<a title=\"#安装\" href=\"#安装\"></a></h2>\n<h3 id=\"n1\">N1<a title=\"#n1\" href=\"#n1\"></a></h3>\n<p>既然是基于Docker的，那在Armbian上就必须安装Docker了。有条件的可以直接使用官方脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https:&#x2F;&#x2F;get.docker.com | sudo bash</span><br></pre></td></tr></table></figure>\n<p>没条件的可以使用国内脚本:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"pc\">PC<a title=\"#pc\" href=\"#pc\"></a></h3>\n<h4 id=\"生成镜像\">生成镜像<a title=\"#生成镜像\" href=\"#生成镜像\"></a></h4>\n<p>可以使用<a href=\"https://www.right.com.cn/forum/space-uid-285101.html\" target=\"_blank\">恩山大佬flippy</a>的一键生成Docker镜像的脚本，由于脚本里的路径都是F大默认的，每个人需要的路径不同，所以我把脚本内容贴出来，可以根据自己的需求来更改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">TAG=latest</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        TAG=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">TMPDIR=openwrt_rootfs</span><br><span class=\"line\">OUTDIR=/home/onegram/docker    <span class=\"comment\"># 本地镜像保存路径，可以自己修改，但目录要提前建好</span></span><br><span class=\"line\">IMG_NAME=onegram/openwrt-n1   <span class=\"comment\"># 镜像名，可以自己修改</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[ -d <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>&quot;</span> ] &amp;&amp; rm -rf <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mkdir -p <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>&quot;</span>  &amp;&amp; \\</span><br><span class=\"line\">gzip -dc openwrt-armvirt-64-default-rootfs.tar.gz | ( <span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>&quot;</span> &amp;&amp; tar xf - ) &amp;&amp; \\</span><br><span class=\"line\">cp -f patches/rc.local <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/etc/&quot;</span> &amp;&amp; \\</span><br><span class=\"line\">cp -f patches/cpustat <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/usr/bin/&quot;</span> &amp;&amp; \\</span><br><span class=\"line\">chmod 755 <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/usr/bin/cpustat&quot;</span> &amp;&amp; \\</span><br><span class=\"line\">cat patches/luci-admin-status-index-html.patch | (<span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/usr/lib/lua/luci/view/admin_status/&quot;</span> &amp;&amp; patch -p0) &amp;&amp; \\</span><br><span class=\"line\">sed -e <span class=\"string\">&quot;s/net.nf_conntrack_max net.ipv4.netfilter.ip_conntrack_max/net.netfilter.nf_conntrack_max net.nf_conntrack_max net.ipv4.netfilter.ip_conntrack_max \\| head -n 1/&quot;</span> -i <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/usr/lib/lua/luci/view/admin_status/index.htm&quot;</span> &amp;&amp; \\</span><br><span class=\"line\">rm -f <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/etc/bench.log&quot;</span> &amp;&amp; \\</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;17 3 * * * /etc/coremark.sh&quot;</span> &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>/etc/crontabs/root&quot;</span> &amp;&amp; \\</span><br><span class=\"line\">(<span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>&quot;</span> &amp;&amp; tar cf ../openwrt-armvirt-64-default-rootfs-patched.tar .) &amp;&amp; \\</span><br><span class=\"line\">rm -f DockerImg-OpenwrtArm64-<span class=\"variable\">$&#123;TAG&#125;</span>.gz &amp;&amp; \\</span><br><span class=\"line\">docker build -t <span class=\"variable\">$&#123;IMG_NAME&#125;</span>:<span class=\"variable\">$&#123;TAG&#125;</span> . &amp;&amp; \\</span><br><span class=\"line\">rm -f  openwrt-armvirt-64-default-rootfs-patched.tar &amp;&amp; \\</span><br><span class=\"line\">rm -rf <span class=\"string\">&quot;<span class=\"variable\">$TMPDIR</span>&quot;</span> &amp;&amp; \\</span><br><span class=\"line\">docker save <span class=\"variable\">$&#123;IMG_NAME&#125;</span>:<span class=\"variable\">$&#123;TAG&#125;</span> | pigz -9 &gt; <span class=\"variable\">$OUTDIR</span>/docker-img-openwrt-aarch64-<span class=\"variable\">$&#123;TAG&#125;</span>.gz</span><br></pre></td></tr></table></figure>\n<p>脚本编辑好以后，保存为<code>.sh</code>后缀的文件。</p>\n<p>脚本需要使用到<code>pigz</code>工具，一般Ubuntu都有集成，为防止某些蠢蛋只会一昧的复制粘贴，我把安装命令也写出来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install pigz</span><br></pre></td></tr></table></figure>\n<p>把OpenWRT固件解压，可以的到一堆乱七八糟名字的固件，我们只需要其中一个<code>.img</code>的文件，把它和脚本放到同一个文件夹下，然后以root权限运行脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bash build.sh</span><br></pre></td></tr></table></figure>\n<p>脚本运行结束后，在脚本里的保存路径就可以看到生成的镜像了。</p>\n<h4 id=\"导入镜像\">导入镜像<a title=\"#导入镜像\" href=\"#导入镜像\"></a></h4>\n<p>把刚刚打包好的镜像用FTP工具上传到N1中，然后SSH连接N1，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load --input xxx   #xxx为你刚刚生成的镜像文件名</span><br></pre></td></tr></table></figure>\n<p>这时候你的镜像就已经成功导入Docker中了，可以输入以下命令查看是否导入成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h2>\n<p>打开网卡的混杂模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link set eth0 promisc on</span><br></pre></td></tr></table></figure>\n<p>给Docker创建网络：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d macvlan --subnet&#x3D;192.168.2.0&#x2F;24 --gateway&#x3D;192.168.2.1 -o parent&#x3D;eth0 macnet   #192.168.2.0&#x2F;24是主路由网段 192.168.2.1是主路由的IP 请根据实际情况修改</span><br></pre></td></tr></table></figure>\n<p>运行OpenWRT容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name openwrt --restart always -d --network macnet --privileged onegram&#x2F;openwrt-n1:latest &#x2F;sbin&#x2F;init #onegram&#x2F;openwrt-n1:latest这是镜像的名称和标签,在docker images里面可以看到,也就是在脚本里自己修改的镜像名字.</span><br></pre></td></tr></table></figure>\n<p>修改Docker容器中的IP：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it openwrt sh</span><br><span class=\"line\">vi &#x2F;etc&#x2F;config&#x2F;network</span><br></pre></td></tr></table></figure>\n<p>按<code>i</code>开启编辑模式，将<code>config interface 'lan'</code>下面的<code>option ipaddr</code>修改为主路由同一网络的IP地址。修改完成后按<code>esc</code>退出编辑模式，输入<code>:wq</code>回车即可保存修改并退出。</p>\n<p>输入<code>exit</code>回车，退出OpenWRT容器后，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart openwrt</span><br></pre></td></tr></table></figure>\n<p>重启OpenWRT容器，让刚刚的设置生效。</p>\n<p>重启完成之后，就可以打开浏览器，输入你刚刚在容器内设置的IP，访问N1上的OpenWRT了。</p>\n<p>默认的用户名为<code>root</code> ，密码为<code>password</code>。</p>\n<p>登录OpenWRT后，打开<code>网络</code>-&gt;<code>接口</code>修改<code>lan</code>接口的设置，把网关地址填上主路由的地址，DNS服务器可以填写主路由地址或你自己习惯的DNS地址。</p>\n<p>下方的DHCP服务器可根据自己的需求来选择是否关闭，如果选择忽略此接口，那么分配IP的功能就交由N1来处理，在电脑中就要手动设置网关为OpenWRT的IP地址，如果不勾选的话，则需要关闭主路由上的DHCP服务，电脑中的设置不需要调整。两种方法各有各的有点，如果使用N1来分配IP的话，一旦N1出现问题，家里的所有网络就瘫痪了。</p>\n<p>最后，在<code>网络</code>-&gt;<code>防火墙</code>-&gt;<code>自定义规则</code>里，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>然后重启防火墙，这时候N1搭载的OpenWRT就开始正常运行了。</p>\n<h2 id=\"感谢\">感谢<a title=\"#感谢\" href=\"#感谢\"></a></h2>\n<p>P3TERX: <a href=\"https://p3terx.com\">https://p3terx.com</a></p>\n<p>flippy: <a href=\"https://www.right.com.cn/forum/space-uid-285101.html\">https://www.right.com.cn/forum/space-uid-285101.html</a></p>\n","prev":{"title":"Jellyfin主题管理插件","link":"2021/01/01/jellyfin-theme"},"next":{"title":"Markdown的基本语法","link":"2021/01/01/markdown"},"plink":"https://0x01x0.ml/2021/01/01/n1/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"安装","title":"安装","index":"2","children":[{"id":"n1","title":"N1","index":"2.1"},{"id":"pc","title":"PC","index":"2.2"}]},{"id":"使用","title":"使用","index":"3"},{"id":"感谢","title":"感谢","index":"4"}]}